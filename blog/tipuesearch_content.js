var tipuesearch = {"pages":[{"title":"About","text":"cmsimde 內容管理系統 倉儲: https://github.com/mdecycu/cmsimde_site 網站: https://mde.tw/cmsimde_site/ 簡報: https://mde.tw/cmsimde_site/reveal 網誌: https://mde.tw/cmsimde_site/blog","tags":"misc","url":"./pages/about/"},{"title":"2024 Spring 課程","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引. 內容管理系統 使用者可以自行利用 cmsimde_site 倉儲作為 Template, 建立自己的網站內容管理系統. 引用網站網址連結的方法: cmsimde_site - 在文章中多次引用同一個網站連結時, 可以使用此種方法. https://github.com/mdecycu/cmsimde_site - 假如想要快速將網址套用 html 網站連結, 可以使用此種方法. cmsimde_site - 也可以使用 Markdown 的標準網站連結使用格式. # 引用 Python 程式的方法 for i in range(10): print(i, \"列出字串\") 也可以直接在 .md 檔案中使用 html 標註, 或加入 Javascript 或 Brython 程式碼. 從 1 累加到 100: 1 add to 100 將 iterable 與 iterator 相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. Filename: .py Run Output 清除輸出區 清除繪圖區 Reload 從 1 累加到 100 part2: 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block Filename: .py Run Output 清除輸出區 清除繪圖區 Reload","tags":"w1","url":"./2024-Spring-w1-blog-tutorial.html"},{"title":"2024 W1上課內容","text":"w1網際內容管理課上課內容 建立個人的Github帳號 建立 Github 帳號, 用來建立並維護個人的課程倉儲與網站. 建立個人課程網站 登入 Github 後, 至 cmsimde_site 倉儲,以此倉儲作為Template 建立個人的wcm2024倉儲,並設定個人的課程網頁","tags":"w1","url":"./2024-Spring-w2-blog-tutorial.html"},{"title":"2024 W2上課內容","text":"w2網際內容管理課上課內容 利用 Github Classroom 建立分組網站 在 mdewcm2024 帳號下, 期中分組作業名稱為 1a,各班作業名稱必須有所區別, 而且各分組 Team 名稱也不能相同. 如何利用 Codespaces 維護網站 採用 Github Codespaces 維護網站的好處是, Visual Studio code 介面提供多終端機與多 ports 開啟功能 可使用init_replit指令安裝Python模組 chmod u+x init_replit ./init_replit 接著輸入(這是動態網站) python3 main.py 再開啟新的終端機 python3 -m http.server 這是靜態網站 即可編輯網站","tags":"w2","url":"./2024-Spring-w3-blog-tutorial.html"},{"title":"2024 W3上課內容","text":"w3網際內容管理課上課內容 git 指令 git 的新增、提交與推送指令: git add . git commit -m \"說明字串\" git push 使用 git add . 表示要認列所進行的全部改版內容, git commit -m 執行之前, 若在近端使用, 必須先行設定 git config, 將 home_ipv6 目錄下的 .gitconfig 中明確列出改版者的身分, 其中包括: git config --global user.name \"提交者的 github 帳號名稱\" git config --global user.email \"提交者在 github 所登錄的 email address\" 使用者也可以利用 git version 查詢目前所使用的 git 版本. git status 通常用來查核目前近端的改版狀況, 例如: 是否與遠端倉儲同步, 或者遠端倉儲已經有了新版本. 若遠端倉儲已經有新的版本, 則在 git push 之前, 必須設法取下遠端資料進行合併後, 才能再提交新的版本並推送到遠端. git pull = git fetch + git merge 由於要將各組員的 wcm2024 設定為各分組倉儲的子模組, 因此必須利用 git submodule add 以各組員的學號作為子目錄名稱, 利用下列指令, 將組員倉儲新增為分組倉儲的子模組: git submodule add 倉儲網址 子目錄 若只要取下倉儲的主要內容, 可以使用下列指令: git clone 倉儲網址_協定.git 指定目錄與否 若要取下帶有子模組的倉儲, 且可能該子模組還有設定其他子模組, 則必須要加上 --recurse-submodules: git log (檢視 Git 紀錄 Q鍵離開) ls -l (瀏覽) pwd (列出現在工作目錄) acp (\"輸入\" 直接上傳) dns (將英文名稱轉為數字IP 問server(伺服器)IP地址 DNS會先查詢自己資料庫) dir (顯示某個磁碟指定目錄下的全部或部分檔案目錄和子目錄) ./b(代表執行、運行)(執行可執行檔) 利用Gitpod維護倉儲 https://www.gitpod.io/ - gitpod的使用與 Codespaces 類似,每個月有 50 小時的免費使用時間, 可以使用 Github 帳號登入 利用 localhost 維護倉儲 透過 Windows 環境中的 USB 隨身碟, 配置可攜程式系統, 用來管理個人與分組的分組倉儲與網站, 可使用老師給的portable_2024.7z(密碼為:kmolab)","tags":"w3","url":"./2024-Spring-w4-blog-tutorial.html"},{"title":"2024 W4上課內容","text":"w4網際內容管理課上課內容，複習前三週的課程內容， 並且介紹 git 與 cmsimde 的相關用法。 有關建立網站 網際內容管理的網際指的並非網際網路的 Internet, 而是指 Web-based, 也就是針對網頁瀏覽器檢視的內容加以管理, 而這些內容除了具備各種不同格式的文字外, 還包括靜態圖片與動態的影音多媒體. Replit 靜態網站檢視 下載 main2.txt 與 static.txt, 其中包含 main2.py 與 static.py, 只要在 Shell 執行 python3 main2.py 就可以執行倉儲內的靜態網站檢視. 另一方面, 若要取消先前執行 python3 main2.py, 只需要在 Shell 頁面按下 ctrl + c, c 代表 cancle 也就是取消. 然後若要執行動態網站，可以在 Shell 執行 python3 main.py 或者使用 Replit 的 Run 按鍵. Replit 建立分組倉儲權限 由於 Replit 上的免費帳號僅允許與一個 Github 帳號對應, 因此若將分組網站 import 到 Replit, 必須自行在 /home/runner/.ssh 目錄下建立 id_rsa 與 config (id_rsa.pub 必須登錄到 Github 對應帳號)","tags":"w4","url":"./2024-Spring-w5-blog-tutorial.html"},{"title":"2024 W6上課內容","text":"w6網際內容管理上課內容, 說明如何透過與 ChatGPT 的對話, 了解有關 git 在不同專業領域的應用方法. Git 歷史與希望解決的問題 Q: 請簡述一下 Git 的發展歷史, 以及當時的背景如何? Git 想要解決甚麼問題? A: Git 是由 Linus Torvalds 在 2005 年創建的分散式版本控制系統。 1.誕生（2005）：Linus Torvalds 開始開發 Git，目的是為了管理 Linux 內核代碼的版本。他受到 BitKeeper 版本控制系統的啟發，但對其某些限制感到不滿，因此決定開發一個新的系統。 2.開源釋出（2005）：Git 在 2005 年 4 月首次釋出，成為一個自由開源軟件項目。最初，Git 的開發主要集中在 Linux 內核社區。 3.快速成長（2005-2008）：Git 在開源社區中迅速增長，許多項目開始轉向使用 Git 進行版本控制，包括像 GNOME 和 X.org 這樣的大型項目。Git 的分散式架構和速度成為其吸引力的主要因素之一。 4.GitHub 的出現（2008）：GitHub 是一個基於 Git 的程式碼托管平台，於 2008 年成立。GitHub 的出現進一步推動了 Git 的普及，它提供了方便易用的用戶界面和協作工具，吸引了大量開發者和項目。 5.持續改進（2008-至今）：自從創建以來，Git 一直在不斷改進和發展。社區持續貢獻新的功能、修復和改進，使得 Git 變得更加強大、穩定和易用。 Git 如何解決產品設計問題 Q: 身為產品開發人員, 使用的是商用封閉的 CAD 套件, 該如何使用 Git 來提升工作效率? A: 以下是一些使用 Git 的方式： 1.版本控制: 使用 Git 對 CAD 項目進行版本控制，可以跟蹤每個版本的變更，並輕鬆地回溯到先前的版本。這對於保留歷史記錄、管理修改和恢復意外更改非常有用。 2.分支管理: 在 Git 中使用分支來進行不同功能或版本的開發。你可以在不同的分支上同時進行不同的實驗和開發工作，而不會影響主要版本的開發。 3.協作與共享: 透過 Git，團隊成員可以輕鬆地共享各自的工作成果，進行協作開發。每個人可以在自己的分支上工作，然後通過合併請求（pull request）將修改合併到主分支中。 4.程式審查: 利用 Git 的分支和合併功能進行程式審查。團隊成員可以在專門的分支上提交各自編寫的程式變更，然後其他成員可以查看這些變更，提供意見和建議，最終通過合併到主分支中。 5.自動化流程: 使用 Git 配合持續集成（CI）和持續部署（CD）工具，自動化 CAD 項目的測試、構建和部署流程。這樣可以節省時間並降低錯誤，同時確保項目的品質和穩定性。 6.文檔和問題追蹤: 將 CAD 專案的文檔和問題追蹤整合到 Git 庫中，以便於跟蹤和管理。例如: 可以使用 Git 提供的 Wiki 功能來撰寫文檔，並使用 Issue 跟蹤功能來追蹤問題和任務。","tags":"w6","url":"./2024-Spring-w6-blog-tutorial.html"}]};