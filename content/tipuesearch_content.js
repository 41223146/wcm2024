var tipuesearch = {"pages": [{'title': 'About', 'text': '網頁:  https://41223146.github.io/wcm2024/ \n 網誌:  https://41223146.github.io/wcm2024/blog_ \n 簡報:  https://41223146.github.io/wcm2024/reveal \n 倉儲:  https://github.com/41223146/wcm2024 \n 本 cmsimde 網際內容管理系統的對應 Template 倉儲: \n https://github.com/mdecycu/cmsimde_site \n 此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改 \n 倉儲對應網站:  https://mde.tw/cmsimde_site \n', 'tags': '', 'url': 'About.html'}, {'title': 'cmsimde', 'text': "SMap  - SiteMap - 依照階次列出網站的所有頁面. \n EditA  - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本. \n Edit  - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式. \n Config  - Configure Site - 編輯頁面標題與管理者密碼. \n Search  - 動態頁面內容的關鍵字搜尋. \n IUpload  - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小. \n IList  - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案. \n FUpload  - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改. \n FList  - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案. \n Logout  - 登出頁面編輯模式. \n Convert  - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁. \n acp  - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲. \n SStatic  - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容. \n RStatic  - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站. \n 80  - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80. \n", 'tags': '', 'url': 'cmsimde.html'}, {'title': 'homework', 'text': '', 'tags': '', 'url': 'homework.html'}, {'title': 'w6', 'text': '', 'tags': '', 'url': 'w6.html'}, {'title': 'Question 1', 'text': '1.git 的發展歷史 \n Git 是由 Linus Torvalds 在 2005 年創建的分散式版本控制系統。以下是 Git 的主要發展歷程： \n \n \n 誕生（2005） ：Linus Torvalds 開始開發 Git，目的是為了管理 Linux 內核代碼的版本。他受到 BitKeeper 版本控制系統的啟發，但對其某些限制感到不滿，因此決定開發一個新的系統。 \n \n \n 開源釋出（2005） ：Git 在 2005 年 4 月首次釋出，成為一個自由開源軟件項目。最初，Git 的開發主要集中在 Linux 內核社區。 \n \n \n 快速成長（2005-2008） ：Git 在開源社區中迅速增長，許多項目開始轉向使用 Git 進行版本控制，包括像 GNOME 和 X.org 這樣的大型項目。Git 的分散式架構和速度成為其吸引力的主要因素之一。 \n \n \n GitHub 的出現（2008） ：GitHub 是一個基於 Git 的程式碼托管平台，於 2008 年成立。GitHub 的出現進一步推動了 Git 的普及，它提供了方便易用的用戶界面和協作工具，吸引了大量開發者和項目。 \n \n \n 持續改進（2008-至今） ：自從創建以來，Git 一直在不斷改進和發展。社區持續貢獻新的功能、修復和改進，使得 Git 變得更加強大、穩定和易用。 \n 2.創作人的相關履歷 \n Git 是由 Linus Torvalds 在 2005 年創建的 \n 專業技能： \n \n 軟體開發：精通 C 語言和其他軟體開發工具，擁有豐富的系統編程和軟體工程經驗。 \n 開源領導：作為 Linux 項目的創建者和主要開發者，擁有成功領導和管理大型開源項目的經驗。 \n 版本控制：開發了 Git 分散式版本控制系統，並對版本控制和協作工具有深入理解和經驗。 \n \n 經歷： \n \n Linux 操作系統的創建者和主要開發者（1991年至今） \n Git 版本控制系統的創建者（2005年至今） \n \n 教育背景： \n \n 芬蘭赫爾辛基大學，計算機科學學士學位 \n \n 成就： \n \n 1991 年創建了 Linux 操作系統，並成為開源社區的重要成員和領導人。 \n 2005 年創建了 Git 分散式版本控制系統，改變了軟體開發的方式，並成為全球開發者社群的重要工具之一。 \n 多次獲得計算機科學和開源社區的榮譽和獎項，包括 ACM 計算機科學獎和 FSF 自由軟體獎。\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 3. 身為產品開發人員, 使用的是商用封閉的 CAD 套件, 該如何使用 Git 來提升工作效率?\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n 代碼版本控制：  儘管 CAD 文件不是文本文件，但仍然可以將它們納入版本控制系統。你可以將 CAD 文件的源代碼、模型文件和其他相關文件存儲在 Git 庫中，這樣就可以跟踪文件的變化，並隨時回溯到之前的版本。這樣做可以確保團隊成員之間的協作更加順暢，並且能夠輕鬆地恢復到以前的工作狀態。 \n \n \n 分支管理：  使用 Git 的分支功能可以讓你更好地管理 CAD 項目的不同版本和功能。你可以根據需要創建不同的分支，例如開發分支、測試分支、修復bug分支等，這樣就可以同時進行多個不同的任務而不會互相干擾。一旦一個分支完成了任務，你可以通過合併操作將其合併回主分支。 \n \n \n 協作與共享：  利用 Git 和遠端存儲庫（如 GitHub、GitLab 或 Bitbucket）來進行協作和共享是一種有效的方式。你可以將 CAD 文件推送到遠端存儲庫中，讓團隊成員可以輕鬆地共享文件、提出建議性更改並進行審核。這種方式可以加速團隊之間的溝通和協作，並確保每個人都使用的是最新的文件版本。 \n \n \n 持續整合/持續部署（CI/CD）：  雖然 CAD 文件不像軟體代碼那樣可以直接進行自動化測試和部署，但你仍然可以將 CI/CD 流程與 Git 整合起來以提高效率。例如，你可以在每次提交新版本或合併請求時自動觸發測試程序，以確保新代碼的穩定性和功能完整性。 \n \n \n 文檔化和註釋：  在 CAD 項目中，詳細的文檔和註釋對於理解和修改設計至關重要。你可以利用 Git 的提交註釋功能來記錄每次修改的內容和目的，並在代碼中添加詳細的註釋來幫助團隊成員理解代碼的功能和結構。 \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'Question 1.html'}, {'title': 'Question 2', 'text': '假如要在 Windows 實際 demo git client 與 git server, 該如何進行? \n 設置 Git 伺服器： \n 安裝 Git： 如果尚未在 Windows 上安裝 Git，請前往 Git 官方網站 下載並安裝 Git for Windows。 \n 初始化 Git 倉庫： 在選擇用作伺服器的目錄中，使用命令列或 Git GUI 初始化一個新的空白倉庫。例如，運行以下命令： \n cd path/to/your/server/directory git init --bare demo.git  3.設置伺服器： 確保你的 Windows 防火牆允許 Git 通過指定端口進行通信（默認情況下是端口 9418）。 \n 4.確認伺服器運行： 確保 Git 伺服器正在運行。你可以使用命令行命令 git daemon 來啟動 Git Daemon， \n 或者考慮使用額外的伺服器軟體，如 GitLab、Bitbucket 等。 \n 使用 Git 客戶端： \n 安裝 Git 客戶端： 在 Windows 上安裝 Git for Windows 或者其他 Git 客戶端應用程式（如 SourceTree、GitHub Desktop 等）。 \n 克隆倉庫： 在選擇存放倉庫的目錄中，使用 Git 客戶端克隆伺服器上的倉庫到本地。例如，如果伺服器在本地運行，你可以使用以下命令： \n \n git clone git://localhost/demo.git 進行修改： 在本地工作目錄中進行修改、添加或刪除文件。 \n 提交更改： 使用 Git 客戶端提交更改到本地倉庫。例如： \n git add . git commit -m "Add new feature" \n 推送到伺服器： 將本地的更改推送到伺服器上的倉庫。例如： \n git push origin master \n \n', 'tags': '', 'url': 'Question 2.html'}, {'title': 'W8', 'text': '詢問ChatGPT，教育的本質為何? \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0\xa0\n \n \n \n \n \n \n \n \n \n \n \n \n \n 教育的本質是促進個體的成長和發展，使其在各個方面都能夠實現自己的潛力。它不僅是傳授知識和技能，還包括培養個體的思考能力、情感智慧和社會技能。教育旨在幫助人們更好地理解自己、社會和世界，並為他們的未來生活和職業做好準備。此外，教育也應該激發個體的好奇心和求知欲，引導他們成為有責任感、有創造力和社會意識的公民。 \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'W8.html'}, {'title': '期中整理', 'text': '', 'tags': '', 'url': '期中整理.html'}, {'title': '網頁式內容管理', 'text': 'Q1:如何建立 Github 上的網站? \n A1: \xa0GitHub 上建立網站可以使用 GitHub Pages ，先創立一個儲存庫，名稱為username.github.io，在存儲庫中創建一個名為「index.html」的 HTML 文件，用於構建你的網站主頁。將網站的代碼添加到 index.html 文件中，然後把它推到 GitHub 存儲庫。 \n Q2:如何管理內容? \n A2: GitHub 上管理網站內容通常使用版本控制工具 Git。可以在本地創建一個 Git 存儲庫，將網站代碼下載到本地，然後在本地修改和更新網站內容。完成修改後，使用 Git 將更改推送到 GitHub 存儲庫。另外，可以使用分支（Branches）來開發新功能或進行實驗，然後將分支合併（Merge）到主分支（通常是 master 或 main）中。 \n Q3: 如何建立章節式網站? \n A3:建立章節式網站可以使用靜態網站生成器，如Replit、Codespaces或Gitpods等。首先，需要選擇一個適合你需求的生成器，然後在本地開發環境中創建你的網站再使用生成器提供的模板和功能來創建不同的章節和內容頁面，組織你的網站內容。完成編輯後，使用生成器將網站生成為靜態文件，然後將這些文件推送到GitHub存儲庫中。最後，你的章節式網站將通過GitHub Pages或其他靜態網站托管服務進行部署，讓其他人可以訪問和瀏覽你的網站。 \n Q4:能放入甚麼多媒體內容? \n A4: \n 1.圖片:嵌入YouTube、Vimeo等視頻平台提供的影片連結，或者將視頻文件直接嵌入到網頁中，讓讀者可以觀看視頻內容。 \n 2.影片:嵌入YouTube、Vimeo等視頻平台提供的影片連結，或者將視頻文件直接嵌入到網頁中，讓讀者可以觀看視頻內容。 \n 3.音頻: 嵌入音樂或語音文件，如Podcast等，讓讀者可以聆聽音頻內容。 \n 4.地圖:嵌入地圖服務，如Google Maps，以展示地理位置或路線信息。 \n 5.表格:使用HTML或Markdown格式來創建和展示表格內容，以整理和呈現數據。 \n 6.圖表和圖形:使用JavaScript圖表庫或其他數據可視化工具來創建和展示圖表和圖形，以呈現數據和統計信息。 \n 7.放入網站:嵌入其他網站提供的媒體內容，如Twitter貼文、Instagram照片等，以擴展你的內容範圍。 \n Q5:靜態圖文? \n A5: \n 1.圖片:將圖片文件直接插入到章節內容中。你可以使用HTML的\xa0 <img> \xa0標籤或Markdown的圖片語法（例如\xa0 ![圖片描述](圖片URL) ）來添加圖片。 \n 2.文本:使用Markdown或HTML來編寫文本內容，包括標題、段落、列表等。Markdown提供了簡單易讀的語法，而HTML則提供更多的自定義和控制。 \n 3.超連結:使用超連結來連接不同章節或其他網站。在HTML中，你可以使用\xa0 <a> \xa0標籤來創建超連結，而Markdown則提供了\xa0 [連結文字](連結URL) \xa0的語法。 \n 4.引用:引用其他資料或文字也是常見的做法。你可以使用Markdown的引用語法（ > 引用文字 ）或HTML的\xa0 <blockquote> \xa0標籤來添加引用內容。 \n Q6:動態圖文? \n A6: \n 1.動畫:使用CSS或JavaScript來創建和控制動畫效果，使圖片、文本或其他元素呈現動態效果。你可以使用CSS的\xa0 @keyframes \xa0樣式或JavaScript的動畫庫（如Animate.css）來添加動畫。 \n Q7:線上遊戲? \n A7: \n 1.使用嵌入式代碼:將線上遊戲的嵌入代碼（embed code）添加到你的網站中。許多線上遊戲提供了嵌入代碼，你只需將其添加到網站的HTML中的相應位置即可。 \n 2.使用iframe元素:使用HTML的\xa0 <iframe> \xa0元素來嵌入線上遊戲。你可以將遊戲的URL添加到\xa0 <iframe> \xa0元素的\xa0 src \xa0屬性中，然後將\xa0 <iframe> \xa0元素添加到你的網站中的任何位置。 \n 補充: <iframe> \xa0 元素是HTML中的一個標記，用於在網頁中嵌入另一個獨立的HTML文檔或外部網頁。它提供了一種在當前網頁中包含其他網頁內容的方法，讓你可以將其他網站的內容嵌入到網頁中，或者在同一網站中的不同頁面之間嵌入內容。 \n <iframe> \xa0 元素有一個 \xa0 src \xa0 屬性，用於指定要嵌入的外部文檔或網頁的URL。除此之外，還可以設置其他屬性來調整iframe的大小、邊框、樣式等。通過iframe，你可以在網頁中創建內嵌的互動元素，如Google地圖、YouTube視頻、線上遊戲等，為網站提供更豐富的內容和功能。 \n 3.設置遊戲頁面:在網站中創建一個專門的遊戲頁面，將遊戲嵌入到該頁面中。這樣做可以使遊戲與網站的其他內容分開，並為用戶提供更好的遊戲體驗。 \n 4.安全性:確保嵌入的遊戲代碼來源可信，以防止可能的安全風險。如果可能的話，最好使用來自可靠和信任的遊戲提供商的嵌入代碼。 \n Q8:3D 零組件展示? \n A8: \n 1.使用Javascript 3D庫:使用像Three.js這樣的JavaScript 3D庫，可以輕鬆在網站中展示3D零組件。你可以將3D模型導入到你的網站中，並使用Three.js等庫來渲染和顯示它們。這樣的庫通常提供了各種功能，如照明、動畫、交互等，以增強3D模型的表現力。 \n 2.使用網頁GL視窗:利用WebGL技術，你可以在網頁中嵌入可交互的3D場景。這需要一些較高級的編程知識，但它可以讓你在網頁中直接渲染3D模型，使它們能夠與用戶互動。 \n 3.嵌入式3D查看器:使用嵌入式3D查看器，如Sketchfab，可以將3D模型嵌入到你的網站中。Sketchfab提供了一個簡單的嵌入代碼，你可以將它添加到你的網站中，以便在線上展示和互動3D模型。 \n Q9:如何建立網頁系統中的網誌? \n A9:步驟 \n 1.選擇網誌平台 \n 2.設置網誌 \n 3.編輯內容 \n 4.發布文章 \n 5.促進網誌 \n 6.定期更新 \n Q10:如何建立網頁系統中的簡報? \n A10:步驟 \n 1.選擇簡報工具 \n 2.建立簡報 \n 3.增加內容 \n 4.設置轉場效果 \n 5.編輯和分享 \n 6.儲存 \n', 'tags': '', 'url': '網頁式內容管理.html'}, {'title': 'Python 程式系統', 'text': 'Q1:如何利用電腦輔助設計室的舊 Python 建立新的可攜環境?  \n Q2:在網頁中置入 Python 語法的程式加上對 Javascript 與超文件語法的了解後, 能夠應用在那些領域?  \n Q3:(精密)機械設計流程?  \n Q4:設計運算?  \n Q5:特定系統模擬?', 'tags': '', 'url': 'Python 程式系統.html'}, {'title': 'Replit', 'text': 'https://replit.com \n 利用 init_replit 指令安裝所需 Python 模組 chmod u+x init_replit ./init_replit \n On Replit: \n .replit: python3 main.py \n chmod u+x cms init_replit \n ./init_replit \n for cmsimde_site (not needed): git submodule update --init --recursive \n for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent \n password generator:\xa0 https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py \xa0 \n \n for IPv6 only Ubuntu: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.com ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p for Replit: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.co #since Replit works for IPv4, therefore no ProxyCommand setting needed #ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n \n \n', 'tags': '', 'url': 'Replit.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n \n', 'tags': '', 'url': 'Brython.html'}]};