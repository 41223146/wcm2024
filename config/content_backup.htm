<h1>About</h1>
<p>網頁: <a class="Link--inTextBlock" href="https://41223146.github.io/wcm2024/">https://41223146.github.io/wcm2024/</a></p>
<p>網誌: <a href="https://41223146.github.io/wcm2024/blog_">https://41223146.github.io/wcm2024/blog_</a></p>
<p>簡報:<a href="/%20https:/41223146.github.io/wcm2024/reveal"> https://41223146.github.io/wcm2024/reveal</a></p>
<p>倉儲: <a href="https://github.com/41223146/wcm2024">https://github.com/41223146/wcm2024</a></p>
<p>本 cmsimde 網際內容管理系統的對應 Template 倉儲:</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/cmsimde_site">https://github.com/mdecycu/cmsimde_site</a></p>
<p style="padding-left: 30px;">此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改</p>
<p style="padding-left: 30px;">倉儲對應網站: <a href="https://mde.tw/cmsimde_site">https://mde.tw/cmsimde_site</a></p>
<h1>cmsimde</h1>
<p><span style="background-color: #ccffcc;">SMap</span> - SiteMap - 依照階次列出網站的所有頁面.</p>
<p><span style="background-color: #ccffcc;">EditA</span> - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本.</p>
<p><span style="background-color: #ccffcc;">Edit</span> - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式.</p>
<p><span style="background-color: #ccffcc;">Config</span> - Configure Site - 編輯頁面標題與管理者密碼.</p>
<p><span style="background-color: #ccffcc;">Search</span> - 動態頁面內容的關鍵字搜尋.</p>
<p><span style="background-color: #ccffcc;">IUpload</span> - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小.</p>
<p><span style="background-color: #ccffcc;">IList</span> - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案.</p>
<p><span style="background-color: #ccffcc;">FUpload</span> - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改.</p>
<p><span style="background-color: #ccffcc;">FList</span> - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案.</p>
<p><span style="background-color: #ccffcc;">Logout</span> - 登出頁面編輯模式.</p>
<p><span style="background-color: #ccffcc;">Convert</span> - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁.</p>
<p><span style="background-color: #ccffcc;">acp</span> - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲.</p>
<p><span style="background-color: #ccffcc;">SStatic</span> - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容.</p>
<p><span style="background-color: #ccffcc;">RStatic</span> - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站.</p>
<p><span style="background-color: #ccffcc;">80</span> - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80.</p>
<h1>homework</h1>
<h2>W2</h2>
<p>在使用replit 近端或遠端，編輯維護網站，可用新的維護網站Codespaces進行維護</p>
<p>1.可以跳過近端繁瑣的步驟，直接開啟動態網站進行編輯。</p>
<p>2.與replit的操作系統差不多。(和其最近更新的動態網站連結亂碼)</p>
<p>3.受限於這個只是給你試用的，所以會有<span>每個月的使用時數上限</span>。</p>
<h2>W3</h2>
<p>上課內容：</p>
<p>1.wink的使用方法</p>
<p>2.使用git常用指令</p>
<p>3.另用指令分組網站成員倉儲分組子模組</p>
<h3>wink</h3>
<p>此網址為wink的安裝地點</p>
<p><a href="https://www.debugmode.com/wink.html">https://www.debugmode.com/wink.html</a></p>
<h3>git order</h3>
<p><span>git add .</span><span> </span>(新增)</p>
<p><span>git commit -m "說明字串"</span>  (提交及名稱)</p>
<p><span>git </span><span>push (推送)</span></p>
<p><span>git version (查詢目前所使用的 git 版本)</span></p>
<p><span>git status (一般是用來檢查目前近端改版情況)</span></p>
<p>若在遠端倉儲已經改版了，就必須先<span>git pull，將遠端資訊與自己的合併更新，才能在提交新的版本推送至倉儲。</span></p>
<p><span>git pull=git fetch + git merge</span></p>
<p><span>git submodule add 倉儲網址子目錄</span></p>
<p><span>git clone --recurse-submodules (.git 指定目錄與否)</span></p>
<p><span>token</span></p>
<p><span>git config --global</span></p>
<p>------------------------</p>
<p>以下為其他其他指令</p>
<p><span>git submodule update --init (抓下子模組)</span></p>
<p><span>git log (檢視 Git 紀錄 Q鍵離開)</span></p>
<p><span>ls -l (瀏覽)</span></p>
<p><span>pwd (列出現在工作目錄)</span></p>
<p><span>acp ("輸入" 直接上傳)</span></p>
<p><span>dns (將英文名稱轉為數字IP 問server(伺服器)IP地址 DNS會先查詢自己資料庫)</span></p>
<p><span>dir (顯示某個磁碟指定目錄下的全部或部分檔案目錄和子目錄)</span></p>
<p><span>./b(代表執行、運行)(執行可執行檔)</span></p>
<h3>建立分組倉儲</h3>
<p>利用Codespaces建立分組倉儲建立個人子模組</p>
<p>另用終端機打出指令</p>
<p><span>git status</span></p>
<p><span>ls -l</span></p>
<p><span>clear</span></p>
<p><span>git submodule add 自己倉儲網址.git空格+學號</span></p>
<p><span>git add .</span></p>
<p><span>git commit -m "add 學號 submodule"</span></p>
<p><span>git push</span></p>
<p>就可以將自己的個人子模組加入到分組倉儲</p>
<h2>W4</h2>
<p>上課內容：</p>
<p>1.有關建立網站</p>
<p>2.Replit靜態網站檢視</p>
<p>3.建立Replit分組倉儲權限</p>
<p>4.Replit,Codespaces與Gitpods執行靜態與動態網站</p>
<p>5.複習前三週上課內容與git介紹</p>
<h2>W6</h2>
<h3>Question 1</h3>
<p><span>1.git 的發展歷史</span></p>
<p>Git 是由 Linus Torvalds 在 2005 年創建的分散式版本控制系統。以下是 Git 的主要發展歷程：</p>
<ol>
<li>
<p><strong>誕生（2005）</strong>：Linus Torvalds 開始開發 Git，目的是為了管理 Linux 內核代碼的版本。他受到 BitKeeper 版本控制系統的啟發，但對其某些限制感到不滿，因此決定開發一個新的系統。</p>
</li>
<li>
<p><strong>開源釋出（2005）</strong>：Git 在 2005 年 4 月首次釋出，成為一個自由開源軟件項目。最初，Git 的開發主要集中在 Linux 內核社區。</p>
</li>
<li>
<p><strong>快速成長（2005-2008）</strong>：Git 在開源社區中迅速增長，許多項目開始轉向使用 Git 進行版本控制，包括像 GNOME 和 X.org 這樣的大型項目。Git 的分散式架構和速度成為其吸引力的主要因素之一。</p>
</li>
<li>
<p><strong>GitHub 的出現（2008）</strong>：GitHub 是一個基於 Git 的程式碼托管平台，於 2008 年成立。GitHub 的出現進一步推動了 Git 的普及，它提供了方便易用的用戶界面和協作工具，吸引了大量開發者和項目。</p>
</li>
<li>
<p><strong>持續改進（2008-至今）</strong>：自從創建以來，Git 一直在不斷改進和發展。社區持續貢獻新的功能、修復和改進，使得 Git 變得更加強大、穩定和易用。</p>
<p>2.創作人的相關履歷</p>
<span>Git 是由 Linus Torvalds 在 2005 年創建的</span>
<p><strong>專業技能：</strong></p>
<ul>
<li>軟體開發：精通 C 語言和其他軟體開發工具，擁有豐富的系統編程和軟體工程經驗。</li>
<li>開源領導：作為 Linux 項目的創建者和主要開發者，擁有成功領導和管理大型開源項目的經驗。</li>
<li>版本控制：開發了 Git 分散式版本控制系統，並對版本控制和協作工具有深入理解和經驗。</li>
</ul>
<p><strong>經歷：</strong></p>
<ul>
<li>Linux 操作系統的創建者和主要開發者（1991年至今）</li>
<li>Git 版本控制系統的創建者（2005年至今）</li>
</ul>
<p><strong>教育背景：</strong></p>
<ul>
<li>芬蘭赫爾辛基大學，計算機科學學士學位</li>
</ul>
<p><strong>成就：</strong></p>
<ul>
<li>1991 年創建了 Linux 操作系統，並成為開源社區的重要成員和領導人。</li>
<li>2005 年創建了 Git 分散式版本控制系統，改變了軟體開發的方式，並成為全球開發者社群的重要工具之一。</li>
<li>多次獲得計算機科學和開源社區的榮譽和獎項，包括 ACM 計算機科學獎和 FSF 自由軟體獎。                                                                                                                                      3.<span><span>身為產品開發人員, 使用的是商用封閉的 CAD 套件, 該如何使用 Git 來提升工作效率?                 </span></span>
<div class="flex-1 overflow-hidden">
<div class="react-scroll-to-bottom--css-lsvhl-79elbk h-full">
<div class="react-scroll-to-bottom--css-lsvhl-1n7m0yu">
<div class="flex flex-col text-sm pb-9">
<div class="w-full text-token-text-primary" data-testid="conversation-turn-15" dir="auto">
<div class="px-4 py-2 justify-center text-base md:gap-6 m-auto">
<div class="flex flex-1 text-base mx-auto gap-3 juice:gap-4 juice:md:gap-6 md:px-5 lg:px-1 xl:px-5 md:max-w-3xl lg:max-w-[40rem] xl:max-w-[48rem] group final-completion">
<div class="relative flex w-full flex-col agent-turn">
<div class="flex-col gap-1 md:gap-3">
<div class="flex flex-grow flex-col max-w-full">
<div class="min-h-[20px] text-message flex flex-col items-start gap-3 whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 overflow-x-auto" data-message-author-role="assistant" data-message-id="76245b96-71c6-494e-9827-ba22100d39c9" dir="auto">
<div class="markdown prose w-full break-words dark:prose-invert light">
<ol>
<li>
<p><strong>代碼版本控制：</strong> 儘管 CAD 文件不是文本文件，但仍然可以將它們納入版本控制系統。你可以將 CAD 文件的源代碼、模型文件和其他相關文件存儲在 Git 庫中，這樣就可以跟踪文件的變化，並隨時回溯到之前的版本。這樣做可以確保團隊成員之間的協作更加順暢，並且能夠輕鬆地恢復到以前的工作狀態。</p>
</li>
<li>
<p><strong>分支管理：</strong> 使用 Git 的分支功能可以讓你更好地管理 CAD 項目的不同版本和功能。你可以根據需要創建不同的分支，例如開發分支、測試分支、修復bug分支等，這樣就可以同時進行多個不同的任務而不會互相干擾。一旦一個分支完成了任務，你可以通過合併操作將其合併回主分支。</p>
</li>
<li>
<p><strong>協作與共享：</strong> 利用 Git 和遠端存儲庫（如 GitHub、GitLab 或 Bitbucket）來進行協作和共享是一種有效的方式。你可以將 CAD 文件推送到遠端存儲庫中，讓團隊成員可以輕鬆地共享文件、提出建議性更改並進行審核。這種方式可以加速團隊之間的溝通和協作，並確保每個人都使用的是最新的文件版本。</p>
</li>
<li>
<p><strong>持續整合/持續部署（CI/CD）：</strong> 雖然 CAD 文件不像軟體代碼那樣可以直接進行自動化測試和部署，但你仍然可以將 CI/CD 流程與 Git 整合起來以提高效率。例如，你可以在每次提交新版本或合併請求時自動觸發測試程序，以確保新代碼的穩定性和功能完整性。</p>
</li>
<li>
<p><strong>文檔化和註釋：</strong> 在 CAD 項目中，詳細的文檔和註釋對於理解和修改設計至關重要。你可以利用 Git 的提交註釋功能來記錄每次修改的內容和目的，並在代碼中添加詳細的註釋來幫助團隊成員理解代碼的功能和結構。</p>
<span></span></li>
</ol>
<p><span></span></p>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<h3>Question 2</h3>
<p>假如要在 Windows 實際 demo git client 與 git server, 該如何進行?</p>
<p>設置 Git 伺服器：</p>
<p>安裝 Git： 如果尚未在 Windows 上安裝 Git，請前往 Git 官方網站 下載並安裝 Git for Windows。</p>
<p>初始化 Git 倉庫： 在選擇用作伺服器的目錄中，使用命令列或 Git GUI 初始化一個新的空白倉庫。例如，運行以下命令：</p>
<p>cd path/to/your/server/directory<br/>git init --bare demo.git<br/> 3.設置伺服器： 確保你的 Windows 防火牆允許 Git 通過指定端口進行通信（默認情況下是端口 9418）。</p>
<p>4.確認伺服器運行： 確保 Git 伺服器正在運行。你可以使用命令行命令 git daemon 來啟動 Git Daemon，</p>
<p>或者考慮使用額外的伺服器軟體，如 GitLab、Bitbucket 等。</p>
<p>使用 Git 客戶端：</p>
<p>安裝 Git 客戶端： 在 Windows 上安裝 Git for Windows 或者其他 Git 客戶端應用程式（如 SourceTree、GitHub Desktop 等）。</p>
<p>克隆倉庫： 在選擇存放倉庫的目錄中，使用 Git 客戶端克隆伺服器上的倉庫到本地。例如，如果伺服器在本地運行，你可以使用以下命令：</p>
<p></p>
<p>git clone git://localhost/demo.git<br/>進行修改： 在本地工作目錄中進行修改、添加或刪除文件。</p>
<p>提交更改： 使用 Git 客戶端提交更改到本地倉庫。例如：</p>
<p>git add .<br/>git commit -m "Add new feature"</p>
<p>推送到伺服器： 將本地的更改推送到伺服器上的倉庫。例如：</p>
<p>git push origin master</p>
<br/><span><span class="ui-provider qy uk ul um un uo up uq ur us ut uu uv uw ux uy uz va vb vc vd ve vf vg vh vi vj vk vl vm vn vo vp vq vr" dir="ltr"></span></span>
<h2>W8</h2>
<strong>詢問ChatGPT，教育的本質為何?</strong> <br/>                                                                                            
<div class="flex-1 overflow-hidden">
<div class="react-scroll-to-bottom--css-oncmi-79elbk h-full">
<div class="react-scroll-to-bottom--css-oncmi-1n7m0yu">
<div>
<div class="flex flex-col text-sm">
<div class="w-full text-token-text-primary" data-scroll-anchor="true" data-testid="conversation-turn-3" dir="auto">
<div class="py-2 juice:py-[18px] px-3 text-base md:px-4 m-auto md:px-5 lg:px-1 xl:px-5">
<div class="mx-auto flex flex-1 gap-3 text-base juice:gap-4 juice:md:gap-6 md:max-w-3xl lg:max-w-[40rem] xl:max-w-[48rem]">
<div class="group/conversation-turn relative flex w-full min-w-0 flex-col agent-turn">
<div class="flex-col gap-1 md:gap-3">
<div class="flex flex-grow flex-col max-w-full">
<div class="min-h-[20px] text-message flex flex-col items-start whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 juice:w-full juice:items-end overflow-x-auto gap-3" data-message-author-role="assistant" data-message-id="899705f7-2767-4f65-9e70-8b24f53d65dc" dir="auto">
<div class="markdown prose w-full break-words dark:prose-invert light">
<p><span>教育的本質是促進個體的成長和發展，使其在各個方面都能夠實現自己的潛力。它不僅是傳授知識和技能，還包括培養個體的思考能力、情感智慧和社會技能。教育旨在幫助人們更好地理解自己、社會和世界，並為他們的未來生活和職業做好準備。此外，教育也應該激發個體的好奇心和求知欲，引導他們成為有責任感、有創造力和社會意識的公民。</span></p>
</div>
</div>
</div>
<div class="mt-1 flex gap-3 empty:hidden juice:-ml-3">
<div class="-ml-1 mt-0 flex h-7 items-center justify-center gap-[2px] self-end text-gray-400 lg:justify-start lg:self-center visible"></div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="w-full md:pt-0 dark:border-white/20 md:border-transparent md:dark:border-transparent md:w-[calc(100%-.5rem)] juice:w-full">
<div class="px-3 text-base md:px-4 m-auto md:px-5 lg:px-1 xl:px-5">
<div class="mx-auto flex flex-1 gap-3 text-base juice:gap-4 juice:md:gap-6 md:max-w-3xl lg:max-w-[40rem] xl:max-w-[48rem]"><form class="w-full">
<div class="relative flex h-full max-w-full flex-1 flex-col">
<div class="absolute bottom-full left-0 right-0 z-20">
<div class="relative h-full w-full">
<div class="flex flex-col gap-3.5 pb-3.5 pt-2">
<h2>w13</h2>
<h3>使用 SSH 客戶端遠端登入</h3>
<p>學員需要一個 SSH 客戶端來連接到主機。以下是使用不同操作系統的簡單說明：</p>
<h4><strong>Windows</strong></h4>
<ul>
<li>可以使用<span> </span><a href="https://www.putty.org/" rel="noreferrer" target="_new">PuTTY</a><span> </span>或<span> </span><a rel="noreferrer" target="_new">Windows Terminal</a>。</li>
<li>打開 PuTTY，輸入<span> </span><code>stud.cycu.org</code><span> </span>作為主機名，並輸入用戶名和初始密碼。</li>
</ul>
<h4><strong>macOS 和 Linux</strong></h4>
<ul>
<li>打開終端（Terminal）。</li>
<li>輸入以下命令：
<div class="dark bg-gray-950 rounded-md border-[0.5px] border-token-border-medium">
<div class="flex items-center relative text-token-text-secondary bg-token-main-surface-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md">ssh 學號@stud.cycu.org</div>
</div>
例如，如果學號是<span> </span><code>s1234567</code>，則輸入：
<div class="dark bg-gray-950 rounded-md border-[0.5px] border-token-border-medium">
<div class="flex items-center relative text-token-text-secondary bg-token-main-surface-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md">ssh s1234567@stud.cycu.org</div>
</div>
</li>
</ul>
<h3>修改初始密碼</h3>
<p>首次登入後，應立即修改初始密碼。可以使用<span> </span><code>passwd</code><span> </span>命令來修改：</p>
<div class="dark bg-gray-950 rounded-md border-[0.5px] border-token-border-medium">
<div class="flex items-center relative text-token-text-secondary bg-token-main-surface-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md">passwd</div>
</div>
<p>系統會提示輸入當前密碼，然後輸入並確認新密碼。</p>
<h3>確保資料安全</h3>
<p>提醒學員注意資料備份和安全：</p>
<ul>
<li>定期備份重要數據。</li>
<li>不要將敏感信息存儲在公共目錄中。</li>
<li>使用安全的密碼和兩步驗證（如有可能）。</li>
</ul>
<h3>獲取幫助和支持</h3>
<p>如果在使用過程中遇到問題，可以：</p>
<ul>
<li>查閱系統提供的幫助文件或使用<span> </span><code>man</code><span> </span>命令（例如<span> </span><code>man ssh</code>）。</li>
<li>與系統管理員或技術支持團隊聯繫。</li>
</ul>
</div>
</div>
</div>
</div>
</form></div>
</div>
</div>
<h1>期中整理</h1>
<h2>網頁式內容管理</h2>
<p><span>Q1:如何建立 Github 上的網站?</span></p>
<p>A1:<span> GitHub 上建立網站可以使用 GitHub Pages ，先創立一個儲存庫，名稱為username.github.io，在存儲庫中創建一個名為「index.html」的 HTML 文件，用於構建你的網站主頁。將網站的代碼添加到 index.html 文件中，然後把它推到 GitHub 存儲庫。</span></p>
<p><span>Q2:如何管理內容?</span></p>
<p><span>A2: GitHub 上管理網站內容通常使用版本控制工具 Git。可以在本地創建一個 Git 存儲庫，將網站代碼下載到本地，然後在本地修改和更新網站內容。完成修改後，使用 Git 將更改推送到 GitHub 存儲庫。另外，可以使用分支（Branches）來開發新功能或進行實驗，然後將分支合併（Merge）到主分支（通常是 master 或 main）中。</span></p>
<p><span>Q3: 如何建立章節式網站?</span></p>
<p><span>A3:建立章節式網站可以使用靜態網站生成器，如Replit、Codespaces或Gitpods等。首先，需要選擇一個適合你需求的生成器，然後在本地開發環境中創建你的網站再使用生成器提供的模板和功能來創建不同的章節和內容頁面，組織你的網站內容。完成編輯後，使用生成器將網站生成為靜態文件，然後將這些文件推送到GitHub存儲庫中。最後，你的章節式網站將通過GitHub Pages或其他靜態網站托管服務進行部署，讓其他人可以訪問和瀏覽你的網站。</span></p>
<p><span>Q4:能放入甚麼多媒體內容?</span></p>
<p><span>A4:</span></p>
<p><span>1.圖片:嵌入YouTube、Vimeo等視頻平台提供的影片連結，或者將視頻文件直接嵌入到網頁中，讓讀者可以觀看視頻內容。</span></p>
<p><span>2.影片:嵌入YouTube、Vimeo等視頻平台提供的影片連結，或者將視頻文件直接嵌入到網頁中，讓讀者可以觀看視頻內容。</span></p>
<p>3.音頻:<span>嵌入音樂或語音文件，如Podcast等，讓讀者可以聆聽音頻內容。</span></p>
<p><span>4.地圖:嵌入地圖服務，如Google Maps，以展示地理位置或路線信息。</span></p>
<p><span>5.表格:使用HTML或Markdown格式來創建和展示表格內容，以整理和呈現數據。</span></p>
<p><span>6.圖表和圖形:使用JavaScript圖表庫或其他數據可視化工具來創建和展示圖表和圖形，以呈現數據和統計信息。</span></p>
<p><span>7.放入網站:嵌入其他網站提供的媒體內容，如Twitter貼文、Instagram照片等，以擴展你的內容範圍。</span></p>
<p><span>Q5:靜態圖文?</span></p>
<p><span>A5:</span></p>
<p><span>1.圖片:將圖片文件直接插入到章節內容中。你可以使用HTML的 <code>&lt;img&gt;</code> 標籤或Markdown的圖片語法（例如 <code>![圖片描述](圖片URL)</code>）來添加圖片。</span></p>
<p><span>2.文本:使用Markdown或HTML來編寫文本內容，包括標題、段落、列表等。Markdown提供了簡單易讀的語法，而HTML則提供更多的自定義和控制。</span></p>
<p><span>3.超連結:使用超連結來連接不同章節或其他網站。在HTML中，你可以使用 <code>&lt;a&gt;</code> 標籤來創建超連結，而Markdown則提供了 <code>[連結文字](連結URL)</code> 的語法。</span></p>
<p><span>4.引用:引用其他資料或文字也是常見的做法。你可以使用Markdown的引用語法（<code>&gt; 引用文字</code>）或HTML的 <code>&lt;blockquote&gt;</code> 標籤來添加引用內容。</span></p>
<p><span>Q6:動態圖文?</span></p>
<p><span>A6:</span></p>
<p><span>1.動畫:使用CSS或JavaScript來創建和控制動畫效果，使圖片、文本或其他元素呈現動態效果。你可以使用CSS的 <code>@keyframes</code> 樣式或JavaScript的動畫庫（如Animate.css）來添加動畫。</span></p>
<p><span>Q7:線上遊戲?</span></p>
<p><span>A7:</span></p>
<p><span>1.使用嵌入式代碼:將線上遊戲的嵌入代碼（embed code）添加到你的網站中。許多線上遊戲提供了嵌入代碼，你只需將其添加到網站的HTML中的相應位置即可。</span></p>
<p><span>2.使用iframe元素:使用HTML的 <code>&lt;iframe&gt;</code> 元素來嵌入線上遊戲。你可以將遊戲的URL添加到 <code>&lt;iframe&gt;</code> 元素的 <code>src</code> 屬性中，然後將 <code>&lt;iframe&gt;</code> 元素添加到你的網站中的任何位置。</span></p>
<p><span>補充:</span><code>&lt;iframe&gt;</code><span> </span>元素是HTML中的一個標記，用於在網頁中嵌入另一個獨立的HTML文檔或外部網頁。它提供了一種在當前網頁中包含其他網頁內容的方法，讓你可以將其他網站的內容嵌入到網頁中，或者在同一網站中的不同頁面之間嵌入內容。</p>
<p><code>&lt;iframe&gt;</code><span> </span>元素有一個<span> </span><code>src</code><span> </span>屬性，用於指定要嵌入的外部文檔或網頁的URL。除此之外，還可以設置其他屬性來調整iframe的大小、邊框、樣式等。通過iframe，你可以在網頁中創建內嵌的互動元素，如Google地圖、YouTube視頻、線上遊戲等，為網站提供更豐富的內容和功能。</p>
<p><span>3.設置遊戲頁面:在網站中創建一個專門的遊戲頁面，將遊戲嵌入到該頁面中。這樣做可以使遊戲與網站的其他內容分開，並為用戶提供更好的遊戲體驗。</span></p>
<p><span>4.安全性:確保嵌入的遊戲代碼來源可信，以防止可能的安全風險。如果可能的話，最好使用來自可靠和信任的遊戲提供商的嵌入代碼。</span></p>
<p><span>Q8:3D 零組件展示?</span></p>
<p><span>A8:</span></p>
<p><span>1.使用Javascript 3D庫:使用像Three.js這樣的JavaScript 3D庫，可以輕鬆在網站中展示3D零組件。你可以將3D模型導入到你的網站中，並使用Three.js等庫來渲染和顯示它們。這樣的庫通常提供了各種功能，如照明、動畫、交互等，以增強3D模型的表現力。</span></p>
<p><span>2.使用網頁GL視窗:利用WebGL技術，你可以在網頁中嵌入可交互的3D場景。這需要一些較高級的編程知識，但它可以讓你在網頁中直接渲染3D模型，使它們能夠與用戶互動。</span></p>
<p><span>3.嵌入式3D查看器:使用嵌入式3D查看器，如Sketchfab，可以將3D模型嵌入到你的網站中。Sketchfab提供了一個簡單的嵌入代碼，你可以將它添加到你的網站中，以便在線上展示和互動3D模型。</span></p>
<p><span>Q9:如何建立網頁系統中的網誌?</span></p>
<p><span>A9:步驟</span></p>
<p><span>1.選擇網誌平台</span></p>
<p><span>2.設置網誌</span></p>
<p><span>3.編輯內容</span></p>
<p><span>4.發布文章</span></p>
<p><span>5.促進網誌</span></p>
<p><span>6.定期更新</span></p>
<p><span>Q10:如何建立網頁系統中的簡報?</span></p>
<p><span>A10:步驟</span></p>
<p><span>1.選擇簡報工具</span></p>
<p><span>2.建立簡報</span></p>
<p><span>3.增加內容</span></p>
<p><span>4.設置轉場效果</span></p>
<p><span>5.編輯和分享</span></p>
<p><span>6.儲存</span></p>
<h2>Python 程式系統</h2>
<p><span>Q1:如何利用電腦輔助設計室的舊 Python 建立新的可攜環境? </span></p>
<p><span>Q2:在網頁中置入 Python 語法的程式加上對 Javascript 與超文件語法的了解後, 能夠應用在那些領域? </span></p>
<p><span>Q3:(精密)機械設計流程? </span></p>
<p><span>Q4:設計運算? </span></p>
<p><span>Q5:特定系統模擬?</span></p>
<h2>網頁上的 IDE</h2>
<p>Q1:IDE 是甚麼?</p>
<p>A1:IDE（整合開發環境）是指一種透過網頁存取的軟體工具，它整合了編碼、調試、版本控制等開發所需的功能，讓開發者可以直接在網頁瀏覽器中進行軟體開發。這種IDE通常包括程式碼編輯器、編譯器、偵錯器等工具，能夠幫助開發者更有效率地編寫、偵錯和管理程式碼。常見的網頁上的IDE包括CodePen、JSFiddle、Replit等。這些工具可以讓開發者在不同的作業系統和裝置上開發，而無需安裝額外的開發環境。</p>
<p>Q2:學會使用網頁上的各種 IDE 之後, 有沒有甚麼感想或心得?</p>
<p>A2:我認為網頁IDE的最大優勢之一是無需安裝，只需透過瀏覽器存取即可開始編碼。這意味著你可以在任何地方、任何裝置上開始工作，只要有網路連線。例如，你可以在家裡的筆記型電腦上編寫程式碼，然後在學校或辦公室的桌上型電腦上繼續工作，而不會受到本地開發環境的限制。 </p>
<p></p>
<h2>AI 工具</h2>
<span>Q1:AI 工具曾經協助我們解決甚麼問題?</span><span></span><span></span><span>A1:AI 工具在各個領域都有所幫助，例如醫療領域，它們能夠協助醫生更準確地診斷疾病，幫助預防交通擁堵，優化城市交通流量，還有金融領域，AI 工具有助於識別和管理金融風險，預防詐欺行為。此外，AI 工具還可以改善自然語言處理，使得機器能夠更好地理解和處理人類語言，促進更有效的溝通和合作</span><br/>
<h2>實作練習問題</h2>
<h1>期末專案</h1>
<h2>whack-a-mole</h2>
<p><span>step1:問chatgpt如何製作打地鼠遊戲，用Flask來構建Web服務，並且用HTML、CSS和JavaScript來構建前端界面和遊戲邏輯。</span></p>
<p><span>step2:設置項目結構</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">whac_a_mole/
├── app.py
├── static/
│   ├── style.css
│   └── script.js
└── templates/
    └── index.html</pre>
<p><span>step3:安裝Flask</span></p>
<p><span>step4:編寫後端 (app.py)</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">from flask import Flask, render_template
 
app = Flask(__name__)
 
@app.route('/')
def index():
    return render_template('index.html')
 
if __name__ == '__main__':
    app.run(host='10.10.40.178', port=5000, debug=True)
</pre>
<p><span>step5: 編寫前端 (HTML, CSS, JavaScript)</span></p>
<p><span>HTML:</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;Whac-A-Mole&lt;/title&gt;
    &lt;link rel="stylesheet" href="/static/style.css"&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Whac-A-Mole Game&lt;/h1&gt;
    &lt;div class="game"&gt;
        &lt;div class="hole" id="hole1"&gt;&lt;/div&gt;
        &lt;div class="hole" id="hole2"&gt;&lt;/div&gt;
        &lt;div class="hole" id="hole3"&gt;&lt;/div&gt;
        &lt;div class="hole" id="hole4"&gt;&lt;/div&gt;
        &lt;div class="hole" id="hole5"&gt;&lt;/div&gt;
        &lt;div class="hole" id="hole6"&gt;&lt;/div&gt;
        &lt;div class="hole" id="hole7"&gt;&lt;/div&gt;
        &lt;div class="hole" id="hole8"&gt;&lt;/div&gt;
        &lt;div class="hole" id="hole9"&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;p&gt;Score: &lt;span id="score"&gt;0&lt;/span&gt;&lt;/p&gt;
    &lt;p&gt;Time left: &lt;span id="timer"&gt;30&lt;/span&gt; seconds&lt;/p&gt;
    &lt;script src="/static/script.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
<p><span>CSS:</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">body {
    font-family: Arial, sans-serif;
    text-align: center;
    background: linear-gradient(to right, #74ebd5, #ACB6E5); /* 漸變背景 */
    margin: 0;
    padding: 0;
    height: 100vh;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}
 
h1 {
    color: #fff;
}
 
.game {
    display: grid;
    grid-template-columns: repeat(3, 100px);
    grid-gap: 10px;
    justify-content: center;
    margin: 20px auto;
}
 
.hole {
    width: 100px;
    height: 100px;
    background-color: #8B4513;
    border-radius: 50%;
    position: relative;
    overflow: hidden; /* 確保地鼠不會超出洞口 */
}
 
.mole {
    width: 80px;
    height: 80px;
    font-size: 3em; /* 增加表情符號大小 */
    position: absolute;
    top: 10px;
    left: 10px;
    display: none;
}
 
.hole.active .mole {
    display: block;
}
 
p {
    color: #fff;
    font-size: 1.2em;
}</pre>
<p><span>JavaScript:</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">let score = 0;
let activeHoles = [];
let gameInterval = null;
let gameTime = 30; // 遊戲時間30秒
let timerInterval = null;
let moleIntervalTime = 700; // 地鼠出現間隔時間，初始為700毫秒
let speedIncreaseCount = 0; // 速度增加次數
 
document.addEventListener("DOMContentLoaded", () =&gt; {
    const holes = document.querySelectorAll('.hole');
    holes.forEach(hole =&gt; {
        const mole = document.createElement('div');
        mole.classList.add('mole');
        mole.textContent = '🐹'; // 使用表情符號來表示地鼠
        hole.appendChild(mole);
        hole.addEventListener('click', () =&gt; {
            if (hole.classList.contains('active')) {
                score++;
                document.getElementById('score').textContent = score;
                hole.classList.remove('active');
            }
        });
    });
 
    function randomHoles() {
        // 清除上一次的地鼠
        activeHoles.forEach(hole =&gt; hole.classList.remove('active'));
        activeHoles = [];
         
        // 隨機選擇1或2隻地鼠出現
        let numMoles = Math.floor(Math.random() * 2) + 1;
        let indices = [];
 
        while (indices.length &lt; numMoles) {
            let index = Math.floor(Math.random() * holes.length);
            if (!indices.includes(index)) {
                indices.push(index);
            }
        }
 
        indices.forEach(index =&gt; {
            let hole = holes[index];
            hole.classList.add('active');
            activeHoles.push(hole);
        });
    }
 
    function startGame() {
        gameInterval = setInterval(randomHoles, moleIntervalTime);
        timerInterval = setInterval(updateTimer, 1000);
    }
 
    function updateTimer() {
        if (gameTime &gt; 0) {
            gameTime--;
            document.getElementById('timer').textContent = gameTime;
            if (gameTime % 10 === 0 &amp;&amp; speedIncreaseCount &lt; 3) {
                increaseSpeed();
                speedIncreaseCount++;
            }
        } else {
            endGame();
        }
    }
 
    function increaseSpeed() {
        clearInterval(gameInterval);
        moleIntervalTime = Math.max(300, moleIntervalTime - 100); // 每次減少100ms，直到300ms
        gameInterval = setInterval(randomHoles, moleIntervalTime);
    }
 
    function endGame() {
        clearInterval(gameInterval);
        clearInterval(timerInterval);
        activeHoles.forEach(hole =&gt; hole.classList.remove('active'));
        alert('Game Over! Your final score is: ' + score);
    }
 
    startGame();
});</pre>
<p>最後成果:</p>
<p><img alt="" height="220" src="/images/打地鼠.png" width="392"/></p>
<p>問過chatgpt的問題:</p>
<p>1.由於最一開始的遊戲是沒有時間的，所以第一個問題是請chatgpt幫我新增遊戲時間為30秒</p>
<p>2.因為一開始遊戲出來的樣子，地鼠是以笑臉的方式呈現，所以我請chatgpt幫我改成地鼠的圖案</p>
<p>3.後來因為地鼠出現的速度太慢，所以我請chatgpt幫我加快地鼠出現的速度</p>
<p>4.然後我為了增加遊戲的難易度及變化，所以我請chatgpt幫我把遊戲調成每10秒加快地鼠的速度</p>
<p>5.最後是我覺得背景過於單調，所以我請chatgpt幫我新增一個漸層的背景</p>
<h1>Replit</h1>
<p><a href="https://replit.com">https://replit.com</a></p>
<p>利用 init_replit 指令安裝所需 Python 模組<br/><br/>chmod u+x init_replit<br/><br/>./init_replit</p>
<p dir="auto">On Replit:</p>
<p dir="auto">.replit: python3 main.py</p>
<p dir="auto">chmod u+x cms init_replit</p>
<p dir="auto">./init_replit</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde_site (not needed): git submodule update --init --recursive</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent</p>
<p dir="auto">password generator: <a href="https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py">https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py</a> </p>
<p dir="auto"></p>
<p dir="auto">for IPv6 only Ubuntu:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.com<br/>ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p<br/><br/>for Replit:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.co<br/>#since Replit works for IPv4, therefore no ProxyCommand setting needed<br/>#ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p</p>
<p></p>
<p></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
</li>
<li>
<p></p>
</li>
</ul>
</li>
</ol>